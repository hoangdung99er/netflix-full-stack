{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n\n  const [userId, setUserId] = useState(null);\n  const [token, setTokenUser] = useState(null);\n  const [expirationDateToken, setExpirationDateToken] = useState();\n  const loginHandler = useCallback(async (uid, token, expirationDate) => {\n    setUserId(uid);\n    setTokenUser(token);\n    const expiration = expirationDate || new Date(new Date().getTime() + 2000 * 60 * 60);\n    setExpirationDateToken(expiration);\n    localStorage.setItem(\"user\", JSON.stringify({\n      userId: uid,\n      token: token,\n      expirationDate: expiration.toISOString()\n    }));\n  }, []);\n  useEffect(() => {\n    const stored = JSON.parse(localStorage.getItem(\"user\"));\n\n    if (stored && stored.token && new Date(stored.expirationDate) > new Date()) {\n      loginHandler(stored.userId, stored.token, new Date(stored.expirationDate));\n    }\n  }, [loginHandler]);\n  const logout = useCallback(() => {\n    setUserId(null);\n    setTokenUser(null);\n    setExpirationDateToken(null);\n    localStorage.removeItem(\"user\");\n  }, []);\n  useEffect(() => {\n    if (token && expirationDateToken) {\n      const remainingTime = expirationDateToken.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, expirationDateToken, logout]);\n  return {\n    token,\n    userId,\n    loginHandler,\n    logout\n  };\n};\n\n_s(useAuth, \"dk8+TiCSCsUZeKk9HxBLg0mpP04=\");","map":{"version":3,"sources":["/home/dung/netflix-project/client/src/context/auth/AuthActions.js"],"names":["useEffect","useState","useCallback","logoutTimer","useAuth","userId","setUserId","token","setTokenUser","expirationDateToken","setExpirationDateToken","loginHandler","uid","expirationDate","expiration","Date","getTime","localStorage","setItem","JSON","stringify","toISOString","stored","parse","getItem","logout","removeItem","remainingTime","setTimeout","clearTimeout"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,IAAIC,WAAJ;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACM,KAAD,EAAQC,YAAR,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,EAA9D;AACA,QAAMU,YAAY,GAAGT,WAAW,CAAC,OAAOU,GAAP,EAAYL,KAAZ,EAAmBM,cAAnB,KAAsC;AACrEP,IAAAA,SAAS,CAACM,GAAD,CAAT;AACAJ,IAAAA,YAAY,CAACD,KAAD,CAAZ;AACA,UAAMO,UAAU,GACdD,cAAc,IAAI,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,EAAP,GAAY,EAA5C,CADpB;AAEAN,IAAAA,sBAAsB,CAACI,UAAD,CAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CACE,MADF,EAEEC,IAAI,CAACC,SAAL,CAAe;AACbf,MAAAA,MAAM,EAAEO,GADK;AAEbL,MAAAA,KAAK,EAAEA,KAFM;AAGbM,MAAAA,cAAc,EAAEC,UAAU,CAACO,WAAX;AAHH,KAAf,CAFF;AAQD,GAd+B,EAc7B,EAd6B,CAAhC;AAgBArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAf;;AACA,QACEF,MAAM,IAAIA,MAAM,CAACf,KAAjB,IACA,IAAIQ,IAAJ,CAASO,MAAM,CAACT,cAAhB,IAAkC,IAAIE,IAAJ,EAFpC,EAGE;AACAJ,MAAAA,YAAY,CACVW,MAAM,CAACjB,MADG,EAEViB,MAAM,CAACf,KAFG,EAGV,IAAIQ,IAAJ,CAASO,MAAM,CAACT,cAAhB,CAHU,CAAZ;AAKD;AACF,GAZQ,EAYN,CAACF,YAAD,CAZM,CAAT;AAcA,QAAMc,MAAM,GAAGvB,WAAW,CAAC,MAAM;AAC/BI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAO,IAAAA,YAAY,CAACS,UAAb,CAAwB,MAAxB;AACD,GALyB,EAKvB,EALuB,CAA1B;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,IAAIE,mBAAb,EAAkC;AAChC,YAAMkB,aAAa,GACjBlB,mBAAmB,CAACO,OAApB,KAAgC,IAAID,IAAJ,GAAWC,OAAX,EADlC;AAEAb,MAAAA,WAAW,GAAGyB,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACD,KAJD,MAIO;AACLE,MAAAA,YAAY,CAAC1B,WAAD,CAAZ;AACD;AACF,GARQ,EAQN,CAACI,KAAD,EAAQE,mBAAR,EAA6BgB,MAA7B,CARM,CAAT;AAUA,SAAO;AAAElB,IAAAA,KAAF;AAASF,IAAAA,MAAT;AAAiBM,IAAAA,YAAjB;AAA+Bc,IAAAA;AAA/B,GAAP;AACD,CApDM;;GAAMrB,O","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCallback } from \"react\";\n\nlet logoutTimer;\nexport const useAuth = () => {\n  const [userId, setUserId] = useState(null);\n  const [token, setTokenUser] = useState(null);\n  const [expirationDateToken, setExpirationDateToken] = useState();\n  const loginHandler = useCallback(async (uid, token, expirationDate) => {\n    setUserId(uid);\n    setTokenUser(token);\n    const expiration =\n      expirationDate || new Date(new Date().getTime() + 2000 * 60 * 60);\n    setExpirationDateToken(expiration);\n    localStorage.setItem(\n      \"user\",\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expirationDate: expiration.toISOString(),\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    const stored = JSON.parse(localStorage.getItem(\"user\"));\n    if (\n      stored && stored.token &&\n      new Date(stored.expirationDate) > new Date()\n    ) {\n      loginHandler(\n        stored.userId,\n        stored.token,\n        new Date(stored.expirationDate)\n      );\n    }\n  }, [loginHandler]);\n\n  const logout = useCallback(() => {\n    setUserId(null);\n    setTokenUser(null);\n    setExpirationDateToken(null);\n    localStorage.removeItem(\"user\");\n  }, []);\n\n  useEffect(() => {\n    if (token && expirationDateToken) {\n      const remainingTime =\n        expirationDateToken.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, expirationDateToken, logout]);\n\n  return { token, userId, loginHandler, logout };\n};\n"]},"metadata":{},"sourceType":"module"}
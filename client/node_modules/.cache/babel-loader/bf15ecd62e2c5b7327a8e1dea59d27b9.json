{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction HttpHook() {\n  _s();\n\n  const activeHttpRequest = useRef([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const sendRequest = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortController = new AbortController();\n    activeHttpRequest.current.push(httpAbortController);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortController.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequest.current = activeHttpRequest.current.filter(reqCtrl => reqCtrl !== httpAbortController);\n\n      if (!response.ok) {\n        return;\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      throw error;\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      activeHttpRequest.current.forEach(abortCrtl => abortCrtl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n}\n\n_s(HttpHook, \"PAehFnEubGjGl/YsiJhzm4+GcX8=\");\n\n_c = HttpHook;\nexport default HttpHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"HttpHook\");","map":{"version":3,"sources":["/home/dung/netflix-project/client/src/hooks/HttpHook.js"],"names":["React","useCallback","useEffect","useRef","useState","HttpHook","activeHttpRequest","isLoading","setIsLoading","error","setError","sendRequest","url","method","body","headers","httpAbortController","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","message","forEach","abortCrtl","abort"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAMC,iBAAiB,GAAGH,MAAM,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGV,WAAW,CAC7B,OAAOW,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACxDP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMQ,mBAAmB,GAAG,IAAIC,eAAJ,EAA5B;AACAX,IAAAA,iBAAiB,CAACY,OAAlB,CAA0BC,IAA1B,CAA+BH,mBAA/B;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCC,QAAAA,IAFgC;AAGhCC,QAAAA,OAHgC;AAIhCO,QAAAA,MAAM,EAAEN,mBAAmB,CAACM;AAJI,OAAN,CAA5B;AAMA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEAlB,MAAAA,iBAAiB,CAACY,OAAlB,GAA4BZ,iBAAiB,CAACY,OAAlB,CAA0BO,MAA1B,CACzBC,OAAD,IAAaA,OAAO,KAAKV,mBADC,CAA5B;;AAIA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AAChB;AACD;;AAEDnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOe,YAAP;AACD,KAnBD,CAmBE,OAAOd,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACmB,OAAP,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMC,KAAN;AACD;AACF,GA7B4B,EA8B7B,EA9B6B,CAA/B;AAiCAP,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXI,MAAAA,iBAAiB,CAACY,OAAlB,CAA0BW,OAA1B,CAAmCC,SAAD,IAAeA,SAAS,CAACC,KAAV,EAAjD;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAExB,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBE,IAAAA;AAApB,GAAP;AACD;;GA7CQN,Q;;KAAAA,Q;AA+CT,eAAeA,QAAf","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction HttpHook() {\n  const activeHttpRequest = useRef([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setIsLoading(true);\n      const httpAbortController = new AbortController();\n      activeHttpRequest.current.push(httpAbortController);\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortController.signal,\n        });\n        const responseData = await response.json();\n\n        activeHttpRequest.current = activeHttpRequest.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortController\n        );\n\n        if (!response.ok) {\n          return;\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n        throw error;\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequest.current.forEach((abortCrtl) => abortCrtl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest };\n}\n\nexport default HttpHook;\n"]},"metadata":{},"sourceType":"module"}